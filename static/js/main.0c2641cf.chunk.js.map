{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","ref","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","wind","deg","urlIcono","concat","icon","alt","src","temp","toFixed","temp_max","temp_min","humidity","pressure","speed","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c2641cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n    //crear refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n        //leer refs y crear objeto\r\n        const respuesta = {\r\n            ciudad : this.ciudadRef.current.value,\r\n            pais : this.paisRef.current.value\r\n        }\r\n\r\n        //enviar por props\r\n\r\n        this.props.datosConsulta(respuesta);\r\n        //reset form\r\n    }\r\n    render() { \r\n        return (  \r\n            <div className=\"contenedor-form\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form onSubmit={this.buscarClima}>\r\n                        <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                            <input id=\"ciudad\" ref={this.ciudadRef} type=\"text\" />\r\n                            <label htmlFor=\"ciudad\">Ciudad:</label>\r\n                        </div>\r\n                        <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                            <select ref={this.paisRef}>\r\n                                <option value=\"\" defaultValue>Elige un país</option>\r\n                                <option value=\"PT\">Portugal</option>\r\n                                <option value=\"ES\">España</option>\r\n                                <option value=\"FR\">Francia</option>\r\n                                <option value=\"IT\">Italia</option>\r\n                                <option value=\"UK\">Reino Unido</option>\r\n                                <option value=\"DE\">Alemania</option>\r\n                                <option value=\"NL\">Holanda</option>\r\n\r\n                            </select>\r\n                            <label htmlFor=\"pais\">País:</label>\r\n                        </div>\r\n                        <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                        <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    datosConsulta : PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n        <div className=\"card-panel red darken-4 error\">\r\n            {props.mensaje}\r\n        </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n      )\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje : PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n\r\n        //obtenemos los datos de la consulta\r\n        const {name, weather, main, wind} = this.props.resultado;\r\n        //si no existen paramos\r\n        if(!name || !weather || !main || !wind) return null;\r\n        //temperatura kelvin a celsius\r\n        const kelvin = 273.15;\r\n        //url del icono del clima y texto alt\r\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt = `Clima de ${name}`;\r\n        //función para dirección del viento\r\n        function  direccionViento(deg){\r\n            if (deg>337.5) return 'Norte';\r\n            if (deg>292.5) return 'Noroeste';\r\n            if(deg>247.5) return 'Oeste';\r\n            if(deg>202.5) return 'Sud Oeste';\r\n            if(deg>157.5) return 'Sur';\r\n            if(deg>122.5) return 'Sud Este';\r\n            if(deg>67.5) return 'Este';\r\n            if(deg>22.5){return 'Nordeste';}\r\n            return 'Norte';\r\n        }\r\n        \r\n        return (\r\n            <div className=\"row resultados\">\r\n                <div className=\"resultado col s12 m12 l12\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                    <span className=\"white-text\">\r\n                    <h2>Resultado del Clima de : {name}<img src={urlIcono} alt={alt} className=\"responsive-img\"/></h2>\r\n                    </span>\r\n                    </div>\r\n                    </div>\r\n                    <hr/>\r\n                    <div className=\"col s12 m8 l6\">\r\n                    <div className=\"card-panel light-blue\">\r\n                    <span className=\"white-text\">\r\n                    <h3 className=\"card-panel white lighten-2 blue-text text-darken-2\">Temperaturas</h3>\r\n                    \r\n                    <p>\r\n                    Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\r\n                    <br/>\r\n                    <i className=\"fas fa-temperature-high\"></i> Max: {(main.temp_max - kelvin).toFixed(2)} &deg;C\r\n                    <br/>\r\n                    <i className=\"fas fa-temperature-low\"></i> Min: {(main.temp_min - kelvin).toFixed(2)} &deg;C\r\n                    </p>\r\n                    </span>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"col s12 m8 l6\">\r\n                    <div className=\"card-panel light-blue\">\r\n                    <span className=\"white-text\">\r\n                    <h3 className=\"card-panel white lighten-2 blue-text text-darken-2\">Otros datos</h3>\r\n                    <p>\r\n                    Humedad:&nbsp;{main.humidity}&nbsp;% \r\n                    <br/>\r\n                    Presión Atmosférica:&nbsp;{main.pressure}&nbsp;mbar\r\n                    <br/>\r\n                    <i className=\"fas fa-tachometer-alt\"></i> Velocidad del viento:&nbsp;{wind.speed}&nbsp;km/h\r\n                    <br/>\r\n                    <i className=\"fa fa-wind\"></i> Dirección del viento:&nbsp;{direccionViento(wind.deg)}\r\n                    </p>\r\n                    </span>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            \r\n        )\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"container-form\">\r\n                \r\n                    {this.mostrarResultado() }\r\n                \r\n\r\n            </div>\r\n         )\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado : PropTypes.object.isRequired\r\n}\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n\n  state = {\n    error:'',\n    consulta: {},\n    resultado: {}\n  }\n  //tenemos que controlar cuando realizar la consulta a la api, cuando haya cambio en el state\n  //prevProps-prevState\n  //si el prevState de la consulta es diferente al state actual, consultar api\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      error: false\n    })\n  }\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n    // leer la url y añadir api key\n    //http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=f6cfd2f7801214eb1d54788fae218ae8\n    const appId = 'f6cfd2f7801214eb1d54788fae218ae8';\n    // Lo ponemos con comilla invertida para poder usar template strings y añadir ciudad, país e id del formulario\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${appId}`;\n    // console.log(url);\n    //Query con fetchApi y promise\n    fetch(url)\n      .then(respuesta => {\n          return respuesta.json();\n      })\n      .then(datos => {\n        //se han leido los datos de la respuesta seteamos State\n        this.setState({\n          resultado : datos\n        })\n        // console.log(datos);\n      })\n      //en caso de error\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad ==='' || respuesta.pais ===''){\n      this.setState({\n        error: true\n      })\n      // console.log('Hay errores');\n    } else {\n      this.setState({\n        consulta : respuesta,\n        error: false\n      })\n      // console.log('Todo Correcto');\n    }\n    // console.log(respuesta);\n  }\n  render() {\n\n    const {error} = this.state, {cod} = this.state.resultado;\n\n    let resultado;\n    if(error){\n        resultado = <Error \n        mensaje=\"Ambos campos son obligatorios\" \n        />\n    } else if(cod === \"404\") {\n      resultado = <Error \n      mensaje=\"Ciudad no encontrada. Revisa ortografía.\" \n      />\n\n    } else {\n      resultado = <Clima\n        resultado = {this.state.resultado}\n      />\n    }\n\n    return (\n      <div className=\"app\">\n        <Header \n        titulo = 'El Tiempo con React by WebsJC'\n        />\n        <Formulario\n        datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}